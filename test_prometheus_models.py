#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Prometheus.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
"""

import subprocess
import sys
import os
import time
import json
import logging
import argparse
from datetime import datetime

# –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∫ —Å–ª–æ–∂–Ω—ã–º)
MODELS_TO_TEST = [
    'DLinear',     # –ü—Ä–æ—Å—Ç–∞—è, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è
    'NLinear',     # –ù–µ–ª–∏–Ω–µ–π–Ω–∞—è –≤–µ—Ä—Å–∏—è Linear
    'PatchTST',    # Transformer –Ω–∞ –ø–∞—Ç—á–∞—Ö - –±—ã—Å—Ç—Ä—ã–π
    'iTransformer', # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Transformer
    'Autoformer',  # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π Transformer
    'FEDformer',   # Fourier Enhanced Decomposed Transformer
    'Informer',    # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Informer
    'TimesNet',    # –ú–Ω–æ–≥–æ–ø–µ—Ä–∏–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –º–µ–¥–ª–µ–Ω–Ω—ã–π
    'Crossformer', # Cross-dimension Transformer
    'Transformer', # –í–∞–Ω–∏–ª—å–Ω—ã–π Transformer - —Å–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π
]

# –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è + –¥–æ–ø. —Ñ–∏—á–∏)
BASE_PARAMS = {
    'task_name': 'long_term_forecast',
    'is_training': 1,
    'data': 'prometheus',
    'root_path': './',
    'data_path': '',  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è prometheus
    'features': 'S',  # Univariate forecasting
    'target': 'common_delayp90',
    'freq': '15s',
    'checkpoints': './checkpoints/',
    'seq_len': 192,     # –£–≤–µ–ª–∏—á–∏–ª –∏—Å—Ç–æ—Ä–∏—é (48 –º–∏–Ω—É—Ç –ø—Ä–∏ 15s –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ)
    'label_len': 96,    # –£–≤–µ–ª–∏—á–∏–ª —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (24 –º–∏–Ω—É—Ç—ã)
    'pred_len': 96,     # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (24 –º–∏–Ω—É—Ç—ã)
    'enc_in': 1,        # –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞ —ç–Ω–∫–æ–¥–µ—Ä–∞ (1 –¥–ª—è univariate)
    'dec_in': 1,        # –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞ –¥–µ–∫–æ–¥–µ—Ä–∞
    'c_out': 1,         # –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–∞ (1 –¥–ª—è univariate)
    'd_model': 768,     # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    'n_heads': 8,
    'e_layers': 3,      # –£–≤–µ–ª–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ —ç–Ω–∫–æ–¥–µ—Ä–∞
    'd_layers': 2,      # –£–≤–µ–ª–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –¥–µ–∫–æ–¥–µ—Ä–∞
    'd_ff': 3072,       # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å feed-forward (4 * d_model)
    'dropout': 0.05,    # –£–º–µ–Ω—å—à–∏–ª dropout –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    'activation': 'gelu',
    'embed': 'timeF',
    'batch_size': 16,        # –£–≤–µ–ª–∏—á–∏–ª batch size –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    'learning_rate': 0.00005, # –£–º–µ–Ω—å—à–∏–ª LR –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    'train_epochs': 80,      # –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    'patience': 15,          # –£–≤–µ–ª–∏—á–∏–ª patience –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    'lradj': 'cosine',       # –ö–æ—Å–∏–Ω—É—Å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ LR
    'gpu': 0,
    'itr': 1,
    'des': 'prometheus_night_training_enhanced',
    
    # üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—á–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞:
    # –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    'moving_avg': 25,        # –û–∫–Ω–æ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ seq_len)
    'decomp_method': 'moving_avg',  # –ú–µ—Ç–æ–¥ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–µ–Ω–¥+—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
    'use_norm': 1,           # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (int: 1=True, 0=False)
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
    'factor': 3,             # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è Informer (—É–º–µ–Ω—å—à–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å)
    
    # –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª down_sampling - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)
    # 'down_sampling_layers': 1,     # –£–±—Ä–∞–ª - –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    # 'down_sampling_method': 'avg', # –£–±—Ä–∞–ª
    # 'down_sampling_window': 2,     # –£–±—Ä–∞–ª
    
    # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–æ–±–∞—Å—Ç–Ω–æ—Å—Ç–∏
    'augmentation_ratio': 1,       # 1x –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    'jitter': True,               # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–≥–∫–æ–≥–æ —à—É–º–∞ (store_true —Ñ–ª–∞–≥)
    'scaling': True,              # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ (store_true —Ñ–ª–∞–≥)
    'seed': 2021,                 # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    
    # GPU –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    'use_gpu': True,             # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU (bool –∑–Ω–∞—á–µ–Ω–∏–µ)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–∏–ª –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    'expand': 2,                 # Expansion factor –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
    'd_conv': 4,                 # Conv kernel size –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
}

def run_experiment(model_name, additional_params=None, timeout=7200):
    """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    logging.info(f"\n{'='*60}")
    logging.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
    logging.info(f"{'='*60}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params = BASE_PARAMS.copy()
    params['model'] = model_name
    params['model_id'] = f'{model_name}_prometheus'
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if additional_params:
        params.update(additional_params)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    cmd = ['python', 'run.py']
    
    # –°–ø–∏—Å–æ–∫ —Ñ–ª–∞–≥–æ–≤ store_true –∏–∑ run.py
    store_true_flags = {
        'inverse', 'use_amp', 'use_multi_gpu', 'jitter', 'scaling', 
        'permutation', 'randompermutation', 'magwarp', 'timewarp', 
        'windowslice', 'windowwarp', 'rotation', 'spawner', 'dtwwarp', 
        'shapedtwwarp', 'wdba', 'discdtw', 'discsdtw'
    }
    
    for key, value in params.items():
        if key in store_true_flags:
            if value:  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ True
                cmd.append(f'--{key}')
        else:
            cmd.extend([f'--{key}', str(value)])
    
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        end_time = time.time()
        
        duration = end_time - start_time
        logging.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            logging.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            logging.info("STDOUT (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):")
            logging.info(result.stdout[-1000:])
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}")
            logging.error("STDERR:")
            logging.error(result.stderr[-1000:])
            logging.error("STDOUT:")
            logging.error(result.stdout[-1000:])
            
        return result.returncode == 0, duration
        
    except subprocess.TimeoutExpired:
        logging.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}")
        return False, timeout
    except Exception as e:
        logging.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
        return False, 0

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_filename = f"prometheus_models_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_filename),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return log_filename

def save_results(results, log_filename):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
    results_filename = log_filename.replace('.log', '_results.json')
    with open(results_filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    return results_filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö Prometheus')
    parser.add_argument('--models', nargs='+', default=MODELS_TO_TEST,
                       help='–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--epochs', type=int, default=80,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è')
    parser.add_argument('--batch_size', type=int, default=32,
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞')
    parser.add_argument('--use_gpu', action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU')
    parser.add_argument('--timeout', type=int, default=14400,
                       help='–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ (4 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    
    args = parser.parse_args()
    
    log_filename = setup_logging()
    
    logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Prometheus")
    logging.info(f"–ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {args.models}")
    logging.info(f"–≠–ø–æ—Ö–∏: {args.epochs}, Batch size: {args.batch_size}")
    logging.info(f"GPU: {'–î–∞' if args.use_gpu else '–ù–µ—Ç'}, –¢–∞–π–º–∞—É—Ç: {args.timeout}s")
    logging.info(f"–î–∞–Ω–Ω—ã–µ: 90600 —Ç–æ—á–µ–∫ —Å 2025-04-27 18:00:00 –ø–æ 2025-05-13 11:41:00")
    logging.info(f"–õ–æ–≥ —Ñ–∞–π–ª: {log_filename}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    BASE_PARAMS['train_epochs'] = args.epochs
    BASE_PARAMS['batch_size'] = args.batch_size
    BASE_PARAMS['use_gpu'] = args.use_gpu
    
    results = {}
    total_start_time = time.time()
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
    model_specific_params = {
        'PatchTST': {
            'patch_len': 16,              # –ü–∞—Ç—á–∏ –ø–æ 16 —Ç–æ—á–µ–∫ (4 –º–∏–Ω—É—Ç—ã)
        },
        'TimesNet': {
            'top_k': 5,                   # –¢–æ–ø-5 –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–µ–π
            'num_kernels': 6,             # 6 —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —è–¥–µ—Ä
        },
        'Crossformer': {
            'seg_len': 48,                # –£–≤–µ–ª–∏—á–∏–ª —Å–µ–≥–º–µ–Ω—Ç—ã –¥–æ 12 –º–∏–Ω—É—Ç
        },
        'FEDformer': {
            'version': 'Fourier',         # –§—É—Ä—å–µ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è
            'mode_select': 'random',      # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥
            'modes': 64,                  # –£–≤–µ–ª–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥
        },
        'Informer': {
            'factor': 5,                  # –ë–æ–ª—å—à–µ –ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è Informer
        },
        'Autoformer': {
            'moving_avg': 25,             # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è Autoformer (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        },
        'iTransformer': {
            'channel_independence': 1,     # –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
        }
    }
    
    for i, model in enumerate(args.models, 1):
        logging.info(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(args.models)}")
        
        additional_params = model_specific_params.get(model, {})
        success, duration = run_experiment(model, additional_params, args.timeout)
        
        results[model] = {
            'success': success,
            'duration': duration,
            'timestamp': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = save_results(results, log_filename)
        logging.info(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏
        if i < len(args.models):
            logging.info("‚è≥ –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º...")
            time.sleep(30)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    total_duration = time.time() - total_start_time
    logging.info(f"\n{'='*80}")
    logging.info("üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logging.info(f"{'='*80}")
    logging.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥ ({total_duration/60:.1f} –º–∏–Ω—É—Ç)")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    final_results_file = save_results(results, log_filename)
    logging.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {final_results_file}")
    
    successful_models = []
    failed_models = []
    
    for model, result in results.items():
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result['success'] else "‚ùå –û—à–∏–±–∫–∞"
        duration_str = f"{result['duration']:.2f}s"
        logging.info(f"{model:15} | {status:12} | {duration_str:>10}")
        
        if result['success']:
            successful_models.append(model)
        else:
            failed_models.append(model)
    
    logging.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–æ: {len(successful_models)}/{len(MODELS_TO_TEST)} –º–æ–¥–µ–ª–µ–π")
    
    if successful_models:
        logging.info(f"\nüéâ –£—Å–ø–µ—à–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(successful_models)}")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
        successful_with_time = [(model, results[model]['duration']) for model in successful_models]
        successful_with_time.sort(key=lambda x: x[1])
        
        logging.info(f"\n‚ö° –°–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏:")
        for model, duration in successful_with_time[:3]:
            logging.info(f"  {model}: {duration:.2f}s")
    
    if failed_models:
        logging.info(f"\nüíî –ù–µ—É–¥–∞—á–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(failed_models)}")
    
    logging.info(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ./checkpoints/")
    logging.info(f"üîç –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ checkpoints/")

if __name__ == "__main__":
    main() 