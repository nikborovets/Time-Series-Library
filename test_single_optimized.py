#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import subprocess
import sys
import time
from datetime import datetime

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
OPTIMIZED_PARAMS = [
    '--task_name', 'long_term_forecast',
    '--is_training', '1',
    '--data', 'prometheus',
    '--root_path', './',
    '--data_path', '',
    '--features', 'S',
    '--target', 'common_delayp90',
    '--freq', '15s',
    '--checkpoints', './checkpoints/',
    
    # üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    '--seq_len', '48',        # 12 –º–∏–Ω—É—Ç –∏—Å—Ç–æ—Ä–∏–∏
    '--label_len', '24',      # 6 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è  
    '--pred_len', '24',       # 6 –º–∏–Ω—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - —É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è
    '--enc_in', '1',
    '--dec_in', '1', 
    '--c_out', '1',
    '--d_model', '256',       # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 768
    '--n_heads', '4',         # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 8
    '--e_layers', '2',        # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3
    '--d_layers', '1',        # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 2
    '--d_ff', '1024',         # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3072
    '--dropout', '0.1',
    '--activation', 'gelu',
    '--embed', 'timeF',
    
    # –û–±—É—á–µ–Ω–∏–µ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ
    '--batch_size', '64',     # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 32
    '--learning_rate', '1e-4', # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5e-5
    '--train_epochs', '30',   # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    '--patience', '8',        # –£–º–µ–Ω—å—à–µ–Ω–æ
    '--lradj', 'cosine',
    
    # GPU
    '--gpu', '0',
    '--itr', '1',
    '--des', 'prometheus_quick_test',
    
    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    '--moving_avg', '11',
    '--decomp_method', 'moving_avg',
    '--use_norm', '1',
    '--factor', '5',
    
    # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    '--augmentation_ratio', '1',
    '--jitter',
    '--scaling', 
    '--seed', '2021',
    '--use_gpu', 'True',
    '--expand', '2',
    '--d_conv', '4'
]

def main():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
    model_name = sys.argv[1] if len(sys.argv) > 1 else 'DLinear'
    
    print(f"üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
    print(f"‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   seq_len=48 (12 –º–∏–Ω), pred_len=24 (6 –º–∏–Ω)")
    print(f"   batch_size=64, lr=1e-4, epochs=30")
    print(f"   d_model=256, n_heads=4")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = ['python', 'run.py'] + OPTIMIZED_PARAMS + [
        '--model', model_name,
        '--model_id', f'{model_name}_prometheus_quick'
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if model_name == 'PatchTST':
        cmd.extend(['--patch_len', '8'])
    elif model_name == 'iTransformer':
        cmd.extend(['--channel_independence', '1'])
    elif model_name == 'Informer':
        cmd.extend(['--factor', '5'])
    
    print(f"\nüîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    print(f"‚è∞ –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%H:%M:%S')}")
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        duration = time.time() - start_time
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        lines = result.stdout.strip().split('\n')
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for line in lines[-10:]:
            if any(keyword in line.lower() for keyword in ['mse:', 'mae:', 'test loss:', 'epoch:']):
                print(f"   {line}")
                
    except subprocess.CalledProcessError as e:
        duration = time.time() - start_time
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.returncode}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥: {e.stdout[-500:]}")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
if __name__ == "__main__":
    main() 