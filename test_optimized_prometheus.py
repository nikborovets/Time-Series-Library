#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö Prometheus
—Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import subprocess
import time
import json
import logging
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
log_filename = f"prometheus_optimized_test_{timestamp}.log"
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
OPTIMIZED_CONFIG = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    'task_name': 'long_term_forecast',
    'is_training': 1,
    'data': 'prometheus',
    'root_path': './',
    'data_path': '',
    'features': 'S',
    'target': 'common_delayp90',
    'freq': '15s',
    'checkpoints': './checkpoints/',
    
    # üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    'seq_len': 48,           # 12 –º–∏–Ω—É—Ç –∏—Å—Ç–æ—Ä–∏–∏ (–≤–º–µ—Å—Ç–æ 48 –º–∏–Ω—É—Ç)
    'label_len': 24,         # 6 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
    'pred_len': 24,          # 6 –º–∏–Ω—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–º–µ—Å—Ç–æ 24 –º–∏–Ω—É—Ç)
    
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ - —É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    'enc_in': 1,
    'dec_in': 1,
    'c_out': 1,
    'd_model': 256,          # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 768
    'n_heads': 4,            # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 8
    'e_layers': 2,           # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3
    'd_layers': 1,           # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 2
    'd_ff': 1024,            # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3072
    'dropout': 0.1,          # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏
    'activation': 'gelu',
    'embed': 'timeF',
    
    # –û–±—É—á–µ–Ω–∏–µ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    'batch_size': 64,        # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 32
    'learning_rate': 1e-4,   # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5e-5
    'train_epochs': 50,      # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 80
    'patience': 10,          # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 15
    'lradj': 'cosine',
    
    # GPU
    'gpu': 0,
    'itr': 1,
    'des': 'prometheus_optimized_highfreq',
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    'moving_avg': 11,        # –ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
    'decomp_method': 'moving_avg',
    'use_norm': 1,
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
    'factor': 5,             # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏—è
    
    # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è - –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è
    'augmentation_ratio': 1,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ int
    'jitter': True,
    'scaling': True,
    'seed': 2021,
    
    # GPU
    'use_gpu': 'True',
    'expand': 2,
    'd_conv': 4
}

# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö)
MODELS_TO_TEST = [
    'DLinear',      # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å
    'LightTS',      # –õ–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    'PatchTST',     # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–ª—è TS
    'iTransformer', # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è
    'TimesNet',     # –ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å
]

# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
MODEL_SPECIFIC_PARAMS = {
    'PatchTST': {'patch_len': 8},  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 16
    'iTransformer': {'channel_independence': 1},
    'Informer': {'factor': 5},
    'FEDformer': {'version': 'Fourier', 'mode_select': 'random', 'modes': 32},
    'Crossformer': {'seg_len': 6},
}

def run_model_test(model_name, timeout_seconds=3600):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    cmd_params = OPTIMIZED_CONFIG.copy()
    cmd_params['model'] = model_name
    cmd_params['model_id'] = f"{model_name}_prometheus_optimized"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    if model_name in MODEL_SPECIFIC_PARAMS:
        cmd_params.update(MODEL_SPECIFIC_PARAMS[model_name])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd_parts = ['python', 'run.py']
    for key, value in cmd_params.items():
        if key in ['jitter', 'scaling'] and value is True:
            # –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —Ñ–ª–∞–≥–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π
            cmd_parts.append(f'--{key}')
        elif isinstance(value, bool):
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–ª–µ–≤—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            cmd_parts.extend([f'--{key}', str(value)])
        else:
            cmd_parts.extend([f'--{key}', str(value)])
    
    cmd_str = ' '.join(cmd_parts)
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞: {cmd_str}")
    
    start_time = time.time()
    logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        result = subprocess.run(
            cmd_parts,
            capture_output=True,
            text=True,
            timeout=timeout_seconds,
            cwd=os.getcwd()
        )
        
        duration = time.time() - start_time
        logging.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            logging.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            stdout_lines = result.stdout.strip().split('\n')
            last_lines = stdout_lines[-20:] if len(stdout_lines) > 20 else stdout_lines
            logging.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:")
            for line in last_lines:
                if any(keyword in line.lower() for keyword in ['mse:', 'mae:', 'test loss:', 'epoch:']):
                    logging.info(f"  {line}")
            
            return {
                'success': True,
                'duration': duration,
                'timestamp': datetime.now().isoformat(),
                'stdout_last_1000': result.stdout[-1000:] if result.stdout else '',
            }
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}")
            logging.error(f"STDERR: {result.stderr}")
            logging.error(f"STDOUT: {result.stdout}")
            
            return {
                'success': False,
                'duration': duration,
                'timestamp': datetime.now().isoformat(),
                'error': result.stderr,
                'stdout': result.stdout
            }
            
    except subprocess.TimeoutExpired:
        duration = time.time() - start_time
        logging.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}")
        return {
            'success': False,
            'duration': duration,
            'timestamp': datetime.now().isoformat(),
            'error': 'Timeout'
        }
    except Exception as e:
        duration = time.time() - start_time
        logging.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}")
        return {
            'success': False,
            'duration': duration,
            'timestamp': datetime.now().isoformat(),
            'error': str(e)
        }

def main():
    logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Prometheus")
    logging.info(f"–ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {MODELS_TO_TEST}")
    logging.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    logging.info(f"  seq_len: {OPTIMIZED_CONFIG['seq_len']} (12 –º–∏–Ω—É—Ç)")
    logging.info(f"  pred_len: {OPTIMIZED_CONFIG['pred_len']} (6 –º–∏–Ω—É—Ç)")
    logging.info(f"  batch_size: {OPTIMIZED_CONFIG['batch_size']}")
    logging.info(f"  learning_rate: {OPTIMIZED_CONFIG['learning_rate']}")
    logging.info(f"  epochs: {OPTIMIZED_CONFIG['train_epochs']}")
    logging.info(f"–õ–æ–≥ —Ñ–∞–π–ª: {log_filename}")
    
    results = {}
    results_filename = f"prometheus_optimized_test_{timestamp}_results.json"
    
    for i, model_name in enumerate(MODELS_TO_TEST, 1):
        logging.info(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(MODELS_TO_TEST)}")
        logging.info(f"\n{'='*60}")
        logging.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        logging.info(f"{'='*60}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        result = run_model_test(model_name, timeout_seconds=3600)  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        results[model_name] = result
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open(results_filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        logging.info(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_filename}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏
        if i < len(MODELS_TO_TEST):
            logging.info("‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º...")
            time.sleep(10)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logging.info(f"\n{'='*60}")
    logging.info("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    logging.info(f"{'='*60}")
    
    successful_models = []
    failed_models = []
    
    for model_name, result in results.items():
        if result['success']:
            successful_models.append((model_name, result['duration']))
            logging.info(f"‚úÖ {model_name}: {result['duration']:.1f}s")
        else:
            failed_models.append((model_name, result.get('error', 'Unknown error')))
            logging.info(f"‚ùå {model_name}: {result.get('error', 'Unknown error')}")
    
    logging.info(f"\nüìä –ò—Ç–æ–≥–æ: {len(successful_models)} —É—Å–ø–µ—à–Ω—ã—Ö, {len(failed_models)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
    logging.info(f"üíæ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_filename}")
    logging.info(f"üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {log_filename}")
    
    if successful_models:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        successful_models.sort(key=lambda x: x[1])
        logging.info(f"\nüèÜ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å: {successful_models[0][0]} ({successful_models[0][1]:.1f}s)")

if __name__ == "__main__":
    main() 